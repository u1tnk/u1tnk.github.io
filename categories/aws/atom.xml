<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aws on u1tnk.log</title>
    <link>https://u1tnk.github.io/categories/aws/</link>
    <description>Recent content in aws on u1tnk.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 17 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://u1tnk.github.io/categories/aws/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EC2インスタンス価格の必要なところだけ表にしてみた</title>
      <link>https://u1tnk.github.io/blog/2014/04/17/aws-price/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://u1tnk.github.io/blog/2014/04/17/aws-price/</guid>
      <description>何？ EC2の価格表で以下が欲しかったので作った。
2月にほぼ手作業で同じようなデータ作ったけど、大幅値下げで既に使いものにならなくなったので業を煮やした。いや値下げは嬉しいんだけど。
同様にネットで見かけるまとめも見やすいものは古くなってたり…
以下公式の不満。
 一画面でECUとかGiBとか比較できない リザーブドインスタンスにしたときのならし月額(一括払いを月額に按分して時間分と足す)が欲しい(見積りツールにはある) オンデマンドとリザーブドインスタンスどんぐらい違うか見たい ECUあたりとかメモリあたりの単価も比較したい 3年とかさすがに使えないのでいらない 中度とか軽度買うぐらいならオンデマンドで良いのでいらない このページのもデザイン的に見やすくないのでSpreadSheetなりに貼りつけて利用を推奨。(以下リンク先のCSSゼロの方がまだ見やすいという…)  やはりみづらいのでgoogle spread sheetに貼りつけた https://docs.google.com/spreadsheets/d/1QzsUHO4Nd07TL5FAnVM2yvLRa3uOslY7pDTrmhwuAf0/edit?usp=sharing    どうやった？ 以下ページのJSでHTML化。このページのはスナップショットとしてコピペ。 https://dl.dropboxusercontent.com/u/3400756/aws_price.html
 料金表のページのソースを見るとJSONPで呼んでたので使わせてもらった。おそらく外部利用を想定してないので止まっても文句は言いません。(見れなくなったら困るのでコピペった)  表について  RI = リザーブドインスタンス一年重度使用 OD = オンデマンド(普通) m1.small比OD価格のm1.small比。 安い順にソートしている。ファミリー毎の方がコスパとか見やすかったかも。  内容感想  m1.medium/m1.largeが消えてた…別ページにあるんだろうけど。 m1.small、特殊用途のhs以外全てSSD化してた。HDDは死んだ… m1.small、単価見ると高い！しょぼい用途には使うけど… m3.mediumも2月時点のm1.small(RIならしで約$34だった)と大差無い。 2月時点のm1.mediumよりC3.largeが安いってw m1.mediumのリザーブドインスタンスどうしろと… c3.largeがオンデマンドでも月一万切る上、メモリ/ECU共にコスパ高い! large以上は特段コスパ良くなったりはしない。 m3の中途半端さ。largeならc3かr3使うと思う。  4/17時点の価格表  size vCPU ECU memoryGiB storageGB RI一括 RI/時間 RIならし月額 OD時間 OD月額 OD m1.small比 OD月額/ECU OD月額/GiB  t1.micro1variable0.615ebsonly620.00911.640.02618.720.42NaN30.43 m1.small111.71 x 1601350.</description>
    </item>
    
    <item>
      <title>JAWS DAYS 2014に行ってきました</title>
      <link>https://u1tnk.github.io/blog/2014/03/15/jawsdays2014/</link>
      <pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://u1tnk.github.io/blog/2014/03/15/jawsdays2014/</guid>
      <description>Immutable Infrastructure JAWS DAYS 2014、Immutable Infrastructure について - naoyaのはてなダイアリー http://d.hatena.ne.jp/naoya/20140315/1394851727
めっちゃ人居ました。個人的にrebuild.fm全部聞いてるのでほとんど聞いてたので割愛w
クックパッドのデプロイとオートスケール 個人的一番勉強になったセッション。
Cookpad&amp;rsquo;s deployment and auto scaling // Speaker Deck https://speakerdeck.com/mirakui/cookpads-deployment-and-auto-scaling
  nameタグ、hostnameは起動時に自動採取
 →これはすぐにでも真似したい。    roleタグというのをつけてデプロイ内容をコントロール
 →ふむふむ    Nameタグからip収集してpowerdnsで管理。
 →そうしたいよね…    ec2からタグ情報取得するApiのImitに到達するらしいw キャッシュしてるとのこと
  Amazon AutoScaling使って無くて自作！
 CloudWatchが最短一分で秒単位で取得したい  そこまで必要なのか…   graceful terminate問題  それは確かに。多少のリクエストなら負荷で落ちるよりマシと思ってやってるが…   ELBでは無くhaproxy使いたい。…  haproxyの方が良いそうな。 ブラックボックスで問題起こったらよくわからんってのは確かに。   デプロイとにAutoScaalingと排他制御するため - 動くとやばいので、排他制御してると。ほー。デプロイ多いからこその問題。    問題調査のための、staticインスタンスとしてAutoScaleとは別管理のインスタンスがある。</description>
    </item>
    
  </channel>
</rss>